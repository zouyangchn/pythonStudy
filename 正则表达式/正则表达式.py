



#在正则表达式中，如果直接给出字符，就是精确匹配。用\d可以匹配一个数字，\w可以匹配一个字母或数字
#'00\d'可以匹配'007'，但无法匹配'00A'；
#'\d\d\d'可以匹配'010'；
#'\w\w\d'可以匹配'py3'；



#.可以匹配任意字符
#'py.'可以匹配'pyc'、'pyo'、'py!'等等。



#要匹配变长的字符，在正则表达式中，用*表示任意个字符（包括0个），
# 用+表示至少一个字符，用?表示0个或1个字符，用{n}表示n个字符，用{n,m}表示n-m个字符：

#\d{3}\s+\d{3,8}。
#\d{3}表示匹配3个数字，例如'010'；
#\s可以匹配一个空格（也包括Tab等空白符），所以\s+表示至少有一个空格，例如匹配' '，' '等；
#\d{3,8}表示3-8个数字，例如'1234567'。
#如果要匹配'010-12345'这样的号码呢？由于'-'是特殊字符，在正则表达式中，要用'\'转义，所以，上面的正则是\d{3}\-\d{3,8}



#要做更精确地匹配，可以用[]表示范围
#[0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线；
#[0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串，比如'a100'，'0_Z'，'Py3000'等等；
#[a-zA-Z\_][0-9a-zA-Z\_]*可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；
#[a-zA-Z\_][0-9a-zA-Z\_]{0, 19}更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。
#A|B可以匹配A或B，所以(P|p)ython可以匹配'Python'或者'python'。
#^表示行的开头，^\d表示必须以数字开头。
#$表示行的结束，\d$表示必须以数字结束。
#你可能注意到了，py也可以匹配'python'，但是加上^py$就变成了整行匹配，就只能匹配'py'了。



#RE模块
#有了准备知识，我们就可以在Python中使用正则表达式了。Python提供re模块，包含所有正则表达式的功能。由于Python的字符串本身也用\转义，所以要特别注意
s = 'ABC\\-001'
#因此我们强烈建议使用Python的r前缀，就不用考虑转义的问题了：
s = r'ABC\-001'


#match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None。常见的判断方法就是：
import re
t=re.match(r'^\d{3}\-\d{3,8}$', '010-12345')
print(t)

s=re.match(r'^\d{3}\-\d{3,8}$', '010 12345')
print(s)

test = '010-12345'
if re.match(r'^\d{3}\-\d{3,8}$', test):
    print('ok')
else:
    print('failed')



#切分字符串
a='a b   c'.split(' ')
print(a)
b=re.split(r'\s+', 'a b   c')
print(b)
c=re.split(r'[\s\,]+', 'a,b, c  d')
print(c)
d=re.split(r'[\s\,\;]+', 'a,b;; c  d')
print(d)

#分组
m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
print(m)
print(m.group(0))
print(m.group(1))
print(m.group(2))

t= '19:05:30'
m = re.match(r'^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$', t)
print(m.group())
print(m.group(0))
print(m.group(1))
print(m.group(2))
print(m.group(3))


#贪婪匹配
x=re.match(r'^(\d+)(0*)$', '102300')
print(x.groups())
#必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\d+采用非贪婪匹配：
y=re.match(r'^(\d+?)(0*)$', '102300')
print(y.groups())

#编译
#当我们在Python中使用正则表达式时，re模块内部会干两件事情：
#编译正则表达式，如果正则表达式的字符串本身不合法，会报错；
#用编译后的正则表达式去匹配字符串。
#1.编译
re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')
#2.使用
d=re_telephone.match('010-12345').groups()
print(d)
e=re_telephone.match('010-8086').groups()
print(e)